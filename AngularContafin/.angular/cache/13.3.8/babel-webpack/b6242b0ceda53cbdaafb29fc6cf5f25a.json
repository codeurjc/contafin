{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar URL = environment.apiBase;\nexport var LoginService = /*#__PURE__*/(function () {\n  var LoginService = /*#__PURE__*/function () {\n    function LoginService(http) {\n      _classCallCheck(this, LoginService);\n\n      this.http = http;\n      this.isLogged = false;\n      this.isAdmin = false;\n    }\n\n    _createClass(LoginService, [{\n      key: \"getLoggedUser\",\n      value: function getLoggedUser() {\n        return this.user;\n      }\n    }, {\n      key: \"setLoggedUser\",\n      value: function setLoggedUser(user) {\n        this.user = user;\n        this.user.imgURL = \"https://localhost:8080/api/User/Photo\";\n      }\n    }, {\n      key: \"isLoggedUser\",\n      value: function isLoggedUser() {\n        return this.isLogged;\n      }\n    }, {\n      key: \"isAdministrator\",\n      value: function isAdministrator() {\n        return this.isAdmin;\n      }\n    }, {\n      key: \"reqIsLogged\",\n      value: function reqIsLogged() {\n        var _this = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        this.http.get(URL + '/login', {\n          withCredentials: true,\n          headers: headers\n        }).subscribe(function (response) {\n          return _this.processLogInResponse(response);\n        }, function (error) {\n          if (error.status !== 401) {\n            console.error('Error when asking if logged: ' + JSON.stringify(error));\n          }\n        });\n      }\n    }, {\n      key: \"processLogInResponse\",\n      value: function processLogInResponse(response) {\n        this.isLogged = true;\n        this.user = response.json();\n        this.user.imgURL = \"https://localhost:8080/api/User/Photo\";\n        this.isAdmin = this.user.roles.indexOf('ROLE_ADMIN') !== -1;\n      }\n    }, {\n      key: \"logIn\",\n      value: function logIn(user, pass) {\n        var _this2 = this;\n\n        var userPass = user + ':' + pass;\n        var headers = new HttpHeaders({\n          'Authorization': 'Basic ' + utf8_to_b64(userPass),\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(URL + '/login', {\n          withCredentials: true,\n          headers: headers\n        }).map(function (response) {\n          _this2.processLogInResponse(response);\n\n          return _this2.user;\n        });\n      }\n    }, {\n      key: \"logOut\",\n      value: function logOut() {\n        var _this3 = this;\n\n        return this.http.get(URL + '/logout', {\n          withCredentials: true\n        }).map(function (response) {\n          _this3.isLogged = false;\n          _this3.isAdmin = false;\n          return response;\n        });\n      }\n    }]);\n\n    return LoginService;\n  }();\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac\n  });\n  return LoginService;\n})();\n\nfunction utf8_to_b64(str) {\n  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}