{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { environment } from '../../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar BASE_URL = environment.apiBase + '/Unit/';\nexport var UnitsService = /*#__PURE__*/(function () {\n  var UnitsService = /*#__PURE__*/function () {\n    function UnitsService(http) {\n      _classCallCheck(this, UnitsService);\n\n      this.http = http;\n    }\n\n    _createClass(UnitsService, [{\n      key: \"getUnits\",\n      value: function getUnits() {\n        var _this = this;\n\n        return this.http.get(BASE_URL).toPromise().then(function (response) {\n          return response;\n        }).catch(function (error) {\n          return _this.handleError(error);\n        });\n      }\n    }, {\n      key: \"getUnit\",\n      value: function getUnit(id) {\n        var _this2 = this;\n\n        return this.http.get(BASE_URL + id).catch(function (error) {\n          return _this2.handleError(error);\n        });\n      } //To know if a unit is completed\n\n    }, {\n      key: \"isCompleted\",\n      value: function isCompleted(id) {\n        var _this3 = this;\n\n        return this.http.get(BASE_URL + id + '/isCompleted').catch(function (error) {\n          return _this3.handleError(error);\n        });\n      } //Number of completed Lessons in a unit (int)\n\n    }, {\n      key: \"numberOfCompletedLessons\",\n      value: function numberOfCompletedLessons(id) {\n        var _this4 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(BASE_URL + id + '/numberOfCompletedLessons', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this4.handleError(error);\n        });\n      }\n    }, {\n      key: \"numberOfCompletedLessons2\",\n      value: function numberOfCompletedLessons2() {\n        var _this5 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(BASE_URL + 'numberOfCompletedLessons', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this5.handleError(error);\n        });\n      } //Need the unit with its lessons and exercises\n\n    }, {\n      key: \"addUnit\",\n      value: function addUnit(unit) {\n        var _this6 = this;\n\n        return this.http.post(BASE_URL, unit, {\n          withCredentials: true\n        }).catch(function (error) {\n          return _this6.handleError(error);\n        });\n      }\n    }, {\n      key: \"uploadImages\",\n      value: function uploadImages(id, nImage, formData) {\n        var headers = new HttpHeaders({\n          'Accept': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.post(BASE_URL + 'Exercise/' + id + '/' + nImage, formData, {\n          withCredentials: true,\n          headers: headers\n        }).toPromise().then(function (response) {\n          return response;\n        }) //DEJAR LOS THEN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        .catch(function (error) {\n          return console.error(error);\n        });\n      }\n    }, {\n      key: \"changeNameUnit\",\n      value: function changeNameUnit(id, name) {\n        var _this7 = this;\n\n        return this.http.put(BASE_URL + id, name).catch(function (error) {\n          return _this7.handleError(error);\n        });\n      }\n    }, {\n      key: \"deleteUnit\",\n      value: function deleteUnit(id) {\n        var _this8 = this;\n\n        return this.http.delete(BASE_URL + id).catch(function (error) {\n          return _this8.handleError(error);\n        });\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        console.error(error);\n        return ErrorObservable.create(\"Server error (\" + error.status + \"): \" + error.text());\n      }\n    }]);\n\n    return UnitsService;\n  }();\n\n  UnitsService.ɵfac = function UnitsService_Factory(t) {\n    return new (t || UnitsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UnitsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UnitsService,\n    factory: UnitsService.ɵfac\n  });\n  return UnitsService;\n})();","map":null,"metadata":{},"sourceType":"module"}