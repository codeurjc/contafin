{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { environment } from '../../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar BASE_URL = environment.apiBase + '/Unit/';\nexport var LessonsService = /*#__PURE__*/(function () {\n  var LessonsService = /*#__PURE__*/function () {\n    function LessonsService(http) {\n      _classCallCheck(this, LessonsService);\n\n      this.http = http;\n    }\n\n    _createClass(LessonsService, [{\n      key: \"getLessons\",\n      value: function getLessons() {\n        var _this = this;\n\n        return this.http.get(BASE_URL + 'Lessons/').catch(function (error) {\n          return _this.handleError(error);\n        });\n      } //Get Lessons of the unit with its id\n\n    }, {\n      key: \"getLessonsOfUnit\",\n      value: function getLessonsOfUnit(id) {\n        var _this2 = this;\n\n        return this.http.get(BASE_URL + id + '/Lesson/').catch(function (error) {\n          return _this2.handleError(error);\n        });\n      } //Need the unit id and lesson id\n\n    }, {\n      key: \"getLesson\",\n      value: function getLesson(idUnit, idLesson) {\n        var _this3 = this;\n\n        return this.http.get(BASE_URL + idUnit + '/Lesson/' + idLesson).catch(function (error) {\n          return _this3.handleError(error);\n        });\n      }\n    }, {\n      key: \"changeNameLesson\",\n      value: function changeNameLesson(idUnit, idLesson, name) {\n        var _this4 = this;\n\n        return this.http.put(BASE_URL + idUnit + '/Lesson/' + idLesson, name).catch(function (error) {\n          return _this4.handleError(error);\n        });\n      } //To complete a lesson when the exercises are done.\n\n    }, {\n      key: \"completeLesson\",\n      value: function completeLesson(idUnit, idLesson) {\n        var _this5 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(BASE_URL + idUnit + '/Lesson/' + idLesson + '/Completed', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this5.handleError(error);\n        });\n      } //To know if a Lesson is completed.\n\n    }, {\n      key: \"isCompleted\",\n      value: function isCompleted(idUnit, idLesson) {\n        var _this6 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(BASE_URL + idUnit + '/Lesson/' + idLesson + '/isCompleted', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this6.handleError(error);\n        });\n      }\n    }, {\n      key: \"isCompleted2\",\n      value: function isCompleted2(idUnit) {\n        var _this7 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.get(BASE_URL + idUnit + '/Lessons/Completed', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this7.handleError(error);\n        });\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        console.error(error);\n        return ErrorObservable.create(\"Server error (\" + error.status + \"): \" + error.text());\n      }\n    }]);\n\n    return LessonsService;\n  }();\n\n  LessonsService.ɵfac = function LessonsService_Factory(t) {\n    return new (t || LessonsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LessonsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LessonsService,\n    factory: LessonsService.ɵfac\n  });\n  return LessonsService;\n})();","map":null,"metadata":{},"sourceType":"module"}