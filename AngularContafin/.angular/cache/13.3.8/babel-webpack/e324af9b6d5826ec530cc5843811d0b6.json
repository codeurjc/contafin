{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { environment } from '../../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar BASE_URL = environment.apiBase + '/Admin/UserData/';\nexport var AdminService = /*#__PURE__*/(function () {\n  var AdminService = /*#__PURE__*/function () {\n    function AdminService(http) {\n      _classCallCheck(this, AdminService);\n\n      this.http = http;\n    }\n\n    _createClass(AdminService, [{\n      key: \"getUserData\",\n      value: function getUserData(page, size) {\n        var _this = this;\n\n        //const options = new RequestOptions({ withCredentials: true });\n        return this.http.get(BASE_URL + '?page=' + page + '&size=' + size, {\n          withCredentials: true\n        }) //return this.http.get(BASE_URL + '?page=' + page + '&size=' + size, options)\n        .catch(function (error) {\n          return _this.handleError(error);\n        });\n      } //Export data to Excel\n\n    }, {\n      key: \"exporData\",\n      value: function exporData() {\n        var _this2 = this;\n\n        return this.http.get(BASE_URL + 'Excel', {\n          responseType: \"blob\"\n        }) //.map(response => response.blob())\n        .catch(function (error) {\n          return _this2.handleError(error);\n        });\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        console.error(error);\n        return ErrorObservable.create(\"Server error (\" + error.status + \"): \" + error.text());\n      }\n    }]);\n\n    return AdminService;\n  }();\n\n  AdminService.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac\n  });\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module"}