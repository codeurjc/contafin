{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\IdeaProjects\\\\contafin\\\\AngularContafin\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { environment } from '../../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar BASE_URL = environment.apiBase + '/Unit/Lessons/Exercises/';\nvar BASE_URL2 = environment.apiBase + '/Unit/';\nexport var ExerciseService = /*#__PURE__*/(function () {\n  var ExerciseService = /*#__PURE__*/function () {\n    function ExerciseService(http) {\n      _classCallCheck(this, ExerciseService);\n\n      this.http = http;\n    }\n\n    _createClass(ExerciseService, [{\n      key: \"getExercises\",\n      value: function getExercises() {\n        var _this = this;\n\n        return this.http.get(BASE_URL).catch(function (error) {\n          return _this.handleError(error);\n        });\n      } //Need the unit id, lesson id and exercise id\n\n    }, {\n      key: \"getExercise\",\n      value: function getExercise(idUnit, idLesson, idExercise) {\n        var _this2 = this;\n\n        return this.http.get(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise).catch(function (error) {\n          return _this2.handleError(error);\n        });\n      } //Same as getExercise but with promise\n\n    }, {\n      key: \"getOneExercise\",\n      value: function getOneExercise(idUnit, idLesson, idExercise) {\n        return this.http.get(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise).toPromise().catch(function (error) {\n          return console.error(error);\n        });\n      }\n    }, {\n      key: \"changeExercise\",\n      value: function changeExercise(idUnit, idLesson, idExercise, exercise) {\n        var _this3 = this;\n\n        return this.http.put(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise, exercise).catch(function (error) {\n          return _this3.handleError(error);\n        });\n      }\n    }, {\n      key: \"getAnswer\",\n      value: function getAnswer(idUnit, idLesson, idExercise) {\n        var _this4 = this;\n\n        return this.http.get(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise + '/Answer').catch(function (error) {\n          return _this4.handleError(error);\n        });\n      }\n    }, {\n      key: \"changeAnswer\",\n      value: function changeAnswer(idUnit, idLesson, idExercise, result) {\n        var _this5 = this;\n\n        return this.http.put(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise + '/Answer', result).catch(function (error) {\n          return _this5.handleError(error);\n        });\n      }\n    }, {\n      key: \"checkExercise\",\n      value: function checkExercise(idUnit, idLesson, idExercise, result) {\n        var _this6 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.put(BASE_URL2 + idUnit + '/Lesson/' + idLesson + '/Exercise/' + idExercise + '/Solution', result, {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this6.handleError(error);\n        });\n      }\n    }, {\n      key: \"deleteAllCompleted\",\n      value: function deleteAllCompleted() {\n        var _this7 = this;\n\n        var headers = new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest'\n        });\n        return this.http.delete(environment.apiBase + '/DeleteAllExercises', {\n          withCredentials: true,\n          headers: headers\n        }).catch(function (error) {\n          return _this7.handleError(error);\n        });\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        console.error(error);\n        return ErrorObservable.create(\"Server error (\" + error.status + \"): \" + error.text());\n      }\n    }]);\n\n    return ExerciseService;\n  }();\n\n  ExerciseService.ɵfac = function ExerciseService_Factory(t) {\n    return new (t || ExerciseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ExerciseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExerciseService,\n    factory: ExerciseService.ɵfac\n  });\n  return ExerciseService;\n})();","map":null,"metadata":{},"sourceType":"module"}